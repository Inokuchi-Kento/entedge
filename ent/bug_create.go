// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"entedge/ent/bug"
	"entedge/ent/tag"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BugCreate is the builder for creating a Bug entity.
type BugCreate struct {
	config
	mutation *BugMutation
	hooks    []Hook
}

// SetBugID sets the "bug_id" field.
func (bc *BugCreate) SetBugID(i int) *BugCreate {
	bc.mutation.SetBugID(i)
	return bc
}

// SetDescription sets the "description" field.
func (bc *BugCreate) SetDescription(s string) *BugCreate {
	bc.mutation.SetDescription(s)
	return bc
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (bc *BugCreate) AddTagIDs(ids ...int) *BugCreate {
	bc.mutation.AddTagIDs(ids...)
	return bc
}

// AddTags adds the "tags" edges to the Tag entity.
func (bc *BugCreate) AddTags(t ...*Tag) *BugCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return bc.AddTagIDs(ids...)
}

// Mutation returns the BugMutation object of the builder.
func (bc *BugCreate) Mutation() *BugMutation {
	return bc.mutation
}

// Save creates the Bug in the database.
func (bc *BugCreate) Save(ctx context.Context) (*Bug, error) {
	return withHooks(ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BugCreate) SaveX(ctx context.Context) *Bug {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BugCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BugCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BugCreate) check() error {
	if _, ok := bc.mutation.BugID(); !ok {
		return &ValidationError{Name: "bug_id", err: errors.New(`ent: missing required field "Bug.bug_id"`)}
	}
	if _, ok := bc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Bug.description"`)}
	}
	return nil
}

func (bc *BugCreate) sqlSave(ctx context.Context) (*Bug, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BugCreate) createSpec() (*Bug, *sqlgraph.CreateSpec) {
	var (
		_node = &Bug{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bug.Table, sqlgraph.NewFieldSpec(bug.FieldID, field.TypeInt))
	)
	if value, ok := bc.mutation.BugID(); ok {
		_spec.SetField(bug.FieldBugID, field.TypeInt, value)
		_node.BugID = value
	}
	if value, ok := bc.mutation.Description(); ok {
		_spec.SetField(bug.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if nodes := bc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   bug.TagsTable,
			Columns: []string{bug.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BugCreateBulk is the builder for creating many Bug entities in bulk.
type BugCreateBulk struct {
	config
	builders []*BugCreate
}

// Save creates the Bug entities in the database.
func (bcb *BugCreateBulk) Save(ctx context.Context) ([]*Bug, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bug, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BugMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BugCreateBulk) SaveX(ctx context.Context) []*Bug {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BugCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BugCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
