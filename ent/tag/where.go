// Code generated by ent, DO NOT EDIT.

package tag

import (
	"entedge/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Tag {
	return predicate.Tag(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Tag {
	return predicate.Tag(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Tag {
	return predicate.Tag(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Tag {
	return predicate.Tag(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Tag {
	return predicate.Tag(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Tag {
	return predicate.Tag(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Tag {
	return predicate.Tag(sql.FieldLTE(FieldID, id))
}

// BugID applies equality check predicate on the "bug_id" field. It's identical to BugIDEQ.
func BugID(v int) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldBugID, v))
}

// Tag applies equality check predicate on the "tag" field. It's identical to TagEQ.
func Tag(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldTag, v))
}

// BugIDEQ applies the EQ predicate on the "bug_id" field.
func BugIDEQ(v int) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldBugID, v))
}

// BugIDNEQ applies the NEQ predicate on the "bug_id" field.
func BugIDNEQ(v int) predicate.Tag {
	return predicate.Tag(sql.FieldNEQ(FieldBugID, v))
}

// BugIDIn applies the In predicate on the "bug_id" field.
func BugIDIn(vs ...int) predicate.Tag {
	return predicate.Tag(sql.FieldIn(FieldBugID, vs...))
}

// BugIDNotIn applies the NotIn predicate on the "bug_id" field.
func BugIDNotIn(vs ...int) predicate.Tag {
	return predicate.Tag(sql.FieldNotIn(FieldBugID, vs...))
}

// BugIDGT applies the GT predicate on the "bug_id" field.
func BugIDGT(v int) predicate.Tag {
	return predicate.Tag(sql.FieldGT(FieldBugID, v))
}

// BugIDGTE applies the GTE predicate on the "bug_id" field.
func BugIDGTE(v int) predicate.Tag {
	return predicate.Tag(sql.FieldGTE(FieldBugID, v))
}

// BugIDLT applies the LT predicate on the "bug_id" field.
func BugIDLT(v int) predicate.Tag {
	return predicate.Tag(sql.FieldLT(FieldBugID, v))
}

// BugIDLTE applies the LTE predicate on the "bug_id" field.
func BugIDLTE(v int) predicate.Tag {
	return predicate.Tag(sql.FieldLTE(FieldBugID, v))
}

// TagEQ applies the EQ predicate on the "tag" field.
func TagEQ(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEQ(FieldTag, v))
}

// TagNEQ applies the NEQ predicate on the "tag" field.
func TagNEQ(v string) predicate.Tag {
	return predicate.Tag(sql.FieldNEQ(FieldTag, v))
}

// TagIn applies the In predicate on the "tag" field.
func TagIn(vs ...string) predicate.Tag {
	return predicate.Tag(sql.FieldIn(FieldTag, vs...))
}

// TagNotIn applies the NotIn predicate on the "tag" field.
func TagNotIn(vs ...string) predicate.Tag {
	return predicate.Tag(sql.FieldNotIn(FieldTag, vs...))
}

// TagGT applies the GT predicate on the "tag" field.
func TagGT(v string) predicate.Tag {
	return predicate.Tag(sql.FieldGT(FieldTag, v))
}

// TagGTE applies the GTE predicate on the "tag" field.
func TagGTE(v string) predicate.Tag {
	return predicate.Tag(sql.FieldGTE(FieldTag, v))
}

// TagLT applies the LT predicate on the "tag" field.
func TagLT(v string) predicate.Tag {
	return predicate.Tag(sql.FieldLT(FieldTag, v))
}

// TagLTE applies the LTE predicate on the "tag" field.
func TagLTE(v string) predicate.Tag {
	return predicate.Tag(sql.FieldLTE(FieldTag, v))
}

// TagContains applies the Contains predicate on the "tag" field.
func TagContains(v string) predicate.Tag {
	return predicate.Tag(sql.FieldContains(FieldTag, v))
}

// TagHasPrefix applies the HasPrefix predicate on the "tag" field.
func TagHasPrefix(v string) predicate.Tag {
	return predicate.Tag(sql.FieldHasPrefix(FieldTag, v))
}

// TagHasSuffix applies the HasSuffix predicate on the "tag" field.
func TagHasSuffix(v string) predicate.Tag {
	return predicate.Tag(sql.FieldHasSuffix(FieldTag, v))
}

// TagEqualFold applies the EqualFold predicate on the "tag" field.
func TagEqualFold(v string) predicate.Tag {
	return predicate.Tag(sql.FieldEqualFold(FieldTag, v))
}

// TagContainsFold applies the ContainsFold predicate on the "tag" field.
func TagContainsFold(v string) predicate.Tag {
	return predicate.Tag(sql.FieldContainsFold(FieldTag, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Tag) predicate.Tag {
	return predicate.Tag(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Tag) predicate.Tag {
	return predicate.Tag(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Tag) predicate.Tag {
	return predicate.Tag(func(s *sql.Selector) {
		p(s.Not())
	})
}
